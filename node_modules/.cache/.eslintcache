[{"/Users/macbook/Documents/React/Project/test-deploy/src/index.js":"1","/Users/macbook/Documents/React/Project/test-deploy/src/App.js":"2","/Users/macbook/Documents/React/Project/test-deploy/src/components/Pages.js":"3"},{"size":256,"mtime":1676100397362,"results":"4","hashOfConfig":"5"},{"size":2713,"mtime":1676100397360,"results":"6","hashOfConfig":"5"},{"size":1291,"mtime":1676100397361,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i1r0kq",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/macbook/Documents/React/Project/test-deploy/src/index.js",[],[],"/Users/macbook/Documents/React/Project/test-deploy/src/App.js",["19"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Pages from \"./components/Pages\";\n// import Pagination from \"./components/Pagination\";\nimport { Pagination, Stack } from \"@mui/material\";\n\nfunction App(props) {\n  // загальний стейт для нашої сторінки\n  const [photos, setPhotos] = useState([]);\n  // прописуємо стан для сторінки, яку потрібно подавати. По дефолту це буде 1(перша сторінка)\n  const [currentPage, setCurentPage] = useState(1);\n  // і ще один стейт в якому будемо зберігати кількість елементів, яку будемо показувати на сторінці.\n  // Ми його міняти не будемо тому можемо вказати один аргумент без сет\n  const [countElement] = useState(10);\n\n  // робимо\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/photos\").then((res) => {\n      setPhotos(res.data);\n    });\n  }, []);\n\n  const lastPhotoIndex = currentPage * countElement;\n  const firstPhotoIndex = lastPhotoIndex - countElement;\n  const currentPhotos = photos.slice(firstPhotoIndex, lastPhotoIndex);\n  //*! const paginationPoint = (pageNumber) => setCurentPage(pageNumber);\n\n  //*! const NextPage = () => {\n  // *!  setCurentPage((prev) => prev + 1);\n  //*! };\n  //*! const PrevPage = () => {\n  //  *! setCurentPage((prev) => prev - 1);\n  // *!};\n\n  return (\n    <div className=\"App\">\n      <h1>Photos</h1>\n      <Pages photos={currentPhotos} />\n      <Pagination\n        // колір боксу з цифрою\n        color=\"primary\"\n        // к-ть цифр (загальна к-ть сторінок) в рядку пагінації\n        count={lastPhotoIndex}\n        // фактична сторінка\n        page={currentPage}\n        // далі нам потрібно вказати параметр який буде нам показувати сторінку\n        // при клікові чи при зміні стоірнки\n        onChange={(_, num) => setCurentPage(num)}\n        // к-ть символів збоку від фактичноʼ сторінки\n        siblingCount={1}\n        // к-ть символів на початку списку з кожного боку\n        boundaryCount={2}\n        // показати кнопки на мочаток на кінець\n        showFirstButton\n        showLastButton\n        // стилі\n        sx={{\n          marginTop: \"40px\",\n          marginLeft: \"38%\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/macbook/Documents/React/Project/test-deploy/src/components/Pages.js",["20"],[],"// розгортаємо нашу компоненту. ВИкористовуємо комбінації rfc\nimport React from \"react\";\nimport \"../components/style.css\";\n\n// В нашій новій компоненті Pages, як аргументи ми будемо приймати через пропси photos та loading\n// Одразу пропишемо диструктуризацію\n\nconst Pages = ({ photos }) => {\n  return (\n    <ul className=\"pagesList\">\n      {photos.map((photo, i) => {\n        return (\n          <li className=\"pagesListItem\">\n            {photo.id}.<span></span>\n            <li></li>\n            {photo.title}\n            <img src={photo.url}></img>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Pages;\n\n//*! Тепер нам потрібно повернутись в компоненту APP та налаштувати, як та які елементи\n//*! повині відображатись\n// Для цього нам потрібно отримати індекс першої сторінки та індекс останьої сторінки, а вже потім будемо\n// визначати чи поточну сторінку чи сторінку, яку потрібно відображати\n",{"ruleId":"21","severity":1,"message":"22","line":6,"column":22,"nodeType":"23","messageId":"24","endLine":6,"endColumn":27},{"ruleId":"25","severity":1,"message":"26","line":17,"column":13,"nodeType":"27","endLine":17,"endColumn":34},"no-unused-vars","'Stack' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]