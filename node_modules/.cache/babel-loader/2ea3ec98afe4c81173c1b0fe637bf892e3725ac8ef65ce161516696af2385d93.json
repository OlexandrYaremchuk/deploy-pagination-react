{"ast":null,"code":"import _slicedToArray from\"/Users/macbook/Documents/React/Project/test-deploy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import\"./App.css\";import axios from\"axios\";import Pages from\"./components/Pages\";// import Pagination from \"./components/Pagination\";\nimport{Pagination,Stack}from\"@mui/material\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(props){// загальний стейт для нашої сторінки\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),photos=_useState2[0],setPhotos=_useState2[1];// прописуємо стан для сторінки, яку потрібно подавати. По дефолту це буде 1(перша сторінка)\nvar _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),currentPage=_useState4[0],setCurentPage=_useState4[1];// і ще один стейт в якому будемо зберігати кількість елементів, яку будемо показувати на сторінці.\n// Ми його міняти не будемо тому можемо вказати один аргумент без сет\nvar _useState5=useState(10),_useState6=_slicedToArray(_useState5,1),countElement=_useState6[0];// робимо\nuseEffect(function(){axios.get(\"https://jsonplaceholder.typicode.com/photos\").then(function(res){setPhotos(res.data);});},[]);var lastPhotoIndex=currentPage*countElement;var firstPhotoIndex=lastPhotoIndex-countElement;var currentPhotos=photos.slice(firstPhotoIndex,lastPhotoIndex);//*! const paginationPoint = (pageNumber) => setCurentPage(pageNumber);\n//*! const NextPage = () => {\n// *!  setCurentPage((prev) => prev + 1);\n//*! };\n//*! const PrevPage = () => {\n//  *! setCurentPage((prev) => prev - 1);\n// *!};\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Photos\"}),/*#__PURE__*/_jsx(Pages,{photos:currentPhotos}),/*#__PURE__*/_jsx(Pagination// колір боксу з цифрою\n,{color:\"primary\"// к-ть цифр (загальна к-ть сторінок) в рядку пагінації\n,count:lastPhotoIndex// фактична сторінка\n,page:currentPage// далі нам потрібно вказати параметр який буде нам показувати сторінку\n// при клікові чи при зміні стоірнки\n,onChange:function onChange(_,num){return setCurentPage(num);}// к-ть символів збоку від фактичноʼ сторінки\n,siblingCount:1// к-ть символів на початку списку з кожного боку\n,boundaryCount:2// показати кнопки на мочаток на кінець\n,showFirstButton:true,showLastButton:true// стилі\n,sx:{marginTop:\"40px\",marginLeft:\"38%\"}})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Pages","Pagination","Stack","App","props","photos","setPhotos","currentPage","setCurentPage","countElement","get","then","res","data","lastPhotoIndex","firstPhotoIndex","currentPhotos","slice","_","num","marginTop","marginLeft"],"sources":["/Users/macbook/Documents/React/Project/test-deploy/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Pages from \"./components/Pages\";\n// import Pagination from \"./components/Pagination\";\nimport { Pagination, Stack } from \"@mui/material\";\n\nfunction App(props) {\n  // загальний стейт для нашої сторінки\n  const [photos, setPhotos] = useState([]);\n  // прописуємо стан для сторінки, яку потрібно подавати. По дефолту це буде 1(перша сторінка)\n  const [currentPage, setCurentPage] = useState(1);\n  // і ще один стейт в якому будемо зберігати кількість елементів, яку будемо показувати на сторінці.\n  // Ми його міняти не будемо тому можемо вказати один аргумент без сет\n  const [countElement] = useState(10);\n\n  // робимо\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/photos\").then((res) => {\n      setPhotos(res.data);\n    });\n  }, []);\n\n  const lastPhotoIndex = currentPage * countElement;\n  const firstPhotoIndex = lastPhotoIndex - countElement;\n  const currentPhotos = photos.slice(firstPhotoIndex, lastPhotoIndex);\n  //*! const paginationPoint = (pageNumber) => setCurentPage(pageNumber);\n\n  //*! const NextPage = () => {\n  // *!  setCurentPage((prev) => prev + 1);\n  //*! };\n  //*! const PrevPage = () => {\n  //  *! setCurentPage((prev) => prev - 1);\n  // *!};\n\n  return (\n    <div className=\"App\">\n      <h1>Photos</h1>\n      <Pages photos={currentPhotos} />\n      <Pagination\n        // колір боксу з цифрою\n        color=\"primary\"\n        // к-ть цифр (загальна к-ть сторінок) в рядку пагінації\n        count={lastPhotoIndex}\n        // фактична сторінка\n        page={currentPage}\n        // далі нам потрібно вказати параметр який буде нам показувати сторінку\n        // при клікові чи при зміні стоірнки\n        onChange={(_, num) => setCurentPage(num)}\n        // к-ть символів збоку від фактичноʼ сторінки\n        siblingCount={1}\n        // к-ть символів на початку списку з кожного боку\n        boundaryCount={2}\n        // показати кнопки на мочаток на кінець\n        showFirstButton\n        showLastButton\n        // стилі\n        sx={{\n          marginTop: \"40px\",\n          marginLeft: \"38%\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"wIAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,MAAOC,MAAK,KAAM,OAAO,CACzB,MAAOC,MAAK,KAAM,oBAAoB,CACtC;AACA,OAASC,UAAU,CAAEC,KAAK,KAAQ,eAAe,CAAC,wFAElD,QAASC,IAAG,CAACC,KAAK,CAAE,CAClB;AACA,cAA4BN,QAAQ,CAAC,EAAE,CAAC,wCAAjCO,MAAM,eAAEC,SAAS,eACxB;AACA,eAAqCR,QAAQ,CAAC,CAAC,CAAC,yCAAzCS,WAAW,eAAEC,aAAa,eACjC;AACA;AACA,eAAuBV,QAAQ,CAAC,EAAE,CAAC,yCAA5BW,YAAY,eAEnB;AACAZ,SAAS,CAAC,UAAM,CACdE,KAAK,CAACW,GAAG,CAAC,6CAA6C,CAAC,CAACC,IAAI,CAAC,SAACC,GAAG,CAAK,CACrEN,SAAS,CAACM,GAAG,CAACC,IAAI,CAAC,CACrB,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,GAAMC,eAAc,CAAGP,WAAW,CAAGE,YAAY,CACjD,GAAMM,gBAAe,CAAGD,cAAc,CAAGL,YAAY,CACrD,GAAMO,cAAa,CAAGX,MAAM,CAACY,KAAK,CAACF,eAAe,CAAED,cAAc,CAAC,CACnE;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,aAAK,SAAS,CAAC,KAAK,wBAClB,oBAAI,QAAM,EAAK,cACf,KAAC,KAAK,EAAC,MAAM,CAAEE,aAAc,EAAG,cAChC,KAAC,UACC;AAAA,EACA,KAAK,CAAC,SACN;AAAA,CACA,KAAK,CAAEF,cACP;AAAA,CACA,IAAI,CAAEP,WACN;AACA;AAAA,CACA,QAAQ,CAAE,kBAACW,CAAC,CAAEC,GAAG,QAAKX,cAAa,CAACW,GAAG,CAAC,EACxC;AAAA,CACA,YAAY,CAAE,CACd;AAAA,CACA,aAAa,CAAE,CACf;AAAA,CACA,eAAe,MACf,cAAc,KACd;AAAA,CACA,EAAE,CAAE,CACFC,SAAS,CAAE,MAAM,CACjBC,UAAU,CAAE,KACd,CAAE,EACF,GACE,CAEV,CAEA,cAAelB,IAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}